一.JS初级

        1.当函数的参数个数无法确定的时候：用 arguments
        2.currentStyle ie获取当前对象的style样式
        3.getComputedStyle 标准下获取当前对象的style样式
	4.var timer = setInterval( 函数, 毫秒 ) 重复执行（发动机）
	5.clearInterval( timer )     清空 
	6.var timer = setTimeout( 函数, 毫秒 )  执行一次(炸弹)
	7.clearTimeout(timer)    清空
	8.var myTime=new Date()  获取当前时间点
	9.myTime.getFullyear()  年 
	10.myTime.getMonth+1()  月
	11.myTime.getDate()     日
	12.myTime.getHours()    小时
	13.myTime.getMinutes()  分钟
	14.myTime.getSeconds()  秒
	15.myTime.getDay()      获得星期
	(获取的星期为数字，需要用if判断转制成汉子,秒前面没有0，需要用函数转变)
	16.天:Math.floor(t/86400)
	17.时:Math.floor(t%86400/3600)
	18.分:Math.floor(t%86400%3600/60)
	19.秒:t%60
	20.数字形式：new Date( 2020,4,1,9,48,12 );
	21.字符串形式：new Date('June 10,2020 12:12:12');
	22.str.charCodeAt()  将字符串转换为编码
	23.String.fromCharCode()   将编码转换成字符串  (静态方法)
	24.str.charAt()  	选中字符串中的某个字符
	25.str.indexOf()       查找字符串中的字符 (第二个参数表示开始查找的位置，-1表示没找到)
	26.str.lastIndexOf()     倒叙查找
	27.str.substring()     截取字符串的某个位置(第一个参数是开始的位置，第二个参数是结束的位置，检测两个数的大小,大的在后面)
	28.str.slice()     同上(当数值为负数时，从尾部查找，不会根据两个数的大小交换)
	29.str.toUpperCase()   将字符转换成大写
	30.str.toLowerCase()   将字符转换成小写
	31.str.split()      将字符串以某个字符分隔开(第二个参数表示分隔前面的几个)
	32.arr.join()     将数组以某符号合并成字符串
	33.arr = [] , arr.length = 0    两种数组清空的办法
	34.arr.push()    在数组尾部添加内容   arr.pop()   尾部删除
	35.arr.unshift()    在数组头部添加内容    arr.shift()    在头部删除
	36.arr.splice()    将数组分开(第一个参数表示初始位置，第二个参数表示个数，第三个参数表示添加的内容)
	37.Math.round()    随机0-1的数字  (Math.round将数字变成整数)
	38.arr.concat()   将第二个数组连接到第一个数组后面
	39.arr.reverse()   将数组倒序排列  
	40.typeof  检测数据类型
	41.parseInt , parseFloat  将数字转换为整数或者浮点数
	42.++ -- 变成数字类型    +有串变成串   - * / % 有数字变成数字
	43.NaN  与自己都不是相等  (提示这个肯定进行了非法的运算操作(不是数字的数字类型)
	44.isNaN   本身不是数字    可以判断是不是数字
	45.浏览器执行js步骤   1.预解析(找一些东西(var function 参数))  2.逐行实现代码(给一些东西赋值)
	46.背景颜色 color 相对路径不要做判断

二.JS中级

	1.DOM  Document Object Model   文档对象模型
	2.元素.childrenNodes     所有类型的子节点
	3.元素.children     只包含元素类型的节点
	4.元素.firstElementChild    元素下第一个只包含元素类型的节点(非标准下包含元素节点)
	5.元素.lastElementChild      元素下最后一个只包含元素类型的节点
	6.元素.nextElementChild      元素下第一个只包含元素类型的节点的下一个节点
	7.元素.previousElementChild      元素下最后一个只包含元素类型的节点的上一个节点
	8.元素.firstChild    元素下的第一个文本类型的节点
	9.元素.parentNode    当前元素的父级节点
	10.元素.offsetParent   离当前元素最近的一个有定位的父级节点（没有默认为body）(如果没有定位，指的是body)
	11.元素.offsetLeft   当前元素距离有定位父级的距离（如果没有父级，指的是html）
	12.元素.style.width    样式宽
	13.元素.clientWidth    可视宽度
	14.元素.offsetWidth   占位宽
	15.用.和[]无法操作自定义属性,用getAttribute 操作自定义属性
	16.元素.getAttribute(属性名称)   获取到元素的自定义属性
	17.元素.setAttribute(属性名称，属性值)  给制定元素属性设置值
	18.元素.removeAttribute(属性名称)   移除属性的属性值
	19.document.createElement(标签名称)    创建元素
	20.父级.removeChild(要删除的元素)  要删除的节点
	21.父级.appendChild(要添加的元素)   追加子元素
	22.父级.insertBefore(新的元素，被插入的元素)   在指定元素前面添加一个元素
	23.父级.replaceChild(新节点，被替换的节点)   替换子节点
	24.ojb.checked  检测元素是否被选中
	25.ojb.onchange    当值发生改变的时候触发
	26.ojb.onsubmit    当表单被提交的时候触发
	27.ojb.onreset     当表单被重置的时候触发

	1.BOM Browser Object Model  浏览器对象模型
	2.window.open('http://www.baidu.com', '_self')  打开一个网页 (window可以省略，第一个参数表示打开的网页地址，第二个参数表示打开方式) （返回值是新打开的indow对象）
	3.window.close()  关闭窗口 (ff：无法关闭  chrome  直接关闭  ie  总是询问)
	4.window.navigatorserAgent    浏览器信息
	5.window.location     地址
	6.window.location.href=window.location内容
	7.window.location.search=url?后面的内容
	8.window.location.hash=url#后面的内容
	9.window.status   窗口中的内容
	10.Math.max()  Math.min()    返回数值参数中的最值
	11.document.documentElement.clientHeight  可视区的尺寸（高度和宽度）（ie下要把documentElement改写body）
	12.document.documentElement.scrollTop  滚动距离（ie下要把documentElement改写body）
	13.document.documentElement.scrollHeight  内容实际高度（ie下认为，如果内容没有那么高，则表示可视区的高度）（ie下要把documentElement改写body）
	14.ojb.onscroll   当滚动条滚动的时候触发
	15.ojb.onresize     当窗口大小发生改变的时候触发
	16.不是所有元素都能接收到焦点的，能响应用操作的元素才有焦点
	17.ojb.onfocus  当元素获取焦点的时候触发
	18.ojb.onblur  当元素失去焦点的时候触发
	19.ojb.select  选择指定元素里面的内容(全选)
	20.event  事件对象  当一个事件发生的时候  记录详细信息的东西(飞机的黑匣子)(必须在一个事件调用的函数里面才有内容)(ie/chrome是内置函数)(标准下  事件对象是通过第一个参数传递的)
	21.ev.clientX[Y]   当一个事件发生的时候，鼠标到页面的可视距离
	22.obj.onmousemove  当鼠标在一个元素上面移动的时候触发（触发频率是根据时间间隔决定的）
	23.事件冒泡  当一个元素接受到事件的时候，会将他接受到的所有传播给他的父元素，一直到window
	24.ev.cancelBubble = true   阻止当前对象的事件冒泡
	25.给一个对象的同一事件绑定不同的函数，会发生覆盖
	26.obj.addEventListener(事件名称，事件函数，是否捕获)  (1.有捕获 2.事件名称没有on 3. 事件的执行顺序为正序 4.this触发改事件的对象)(标准下)
	27.obj.attachEvent(事件名称,事件函数)(1.没有捕获 2.事件名称没有on 3.事件函数执行的顺序为倒叙 4this指向window)
	28.call第一个参数改变函数执行中this内部指向  第二个参数开始 正常
	29.绑定事件的取消(ie obj.detachEvent(事件名称，事件函数) 标准（obj.addEventListener(事件名称，事件函数，是否捕获)）)
	30.obj.onkeydown  当键盘按键按下的时候触发
	31.obj.onketup   当键盘按键抬起的时候触发
	32.ev.keyCode   数字类型   键盘按键的值  （键值）
	33.ctrlKey,shiftKey,altKey  布尔值
	34.不是所有元素都能够接受键盘事件，能响应用户输入的元素才行（document）
	35.obj.onkeydown  如果按下不抬起 会连续默认触发
	36.事件默认行为  解决办法( return false )(addEventListenter事件需要用过ev.preventDefault()取消(火狐浏览器下的默认鼠标滑轮事件就需要取消))
	37.document.oncontextmenu  浏览器右键点击菜单
	38.标准浏览器下 onmousewheel ev.wheelDelta  (上:120 下:-120)
	39.ff浏览下  DOMMouseScroll  必须用addEveentListener滑轮事件
	40.document.cookie 存储数据 当用户访问某个网站(网页)的时候，我们就可以应用cookie来访问电脑上村粗的数据（存储在电脑磁盘中）(不用的浏览器存放的cookie位置不一样，也不能通用，cookie的存储是以域名开始进行分区的,cookie 的数据可以设置名字,一个域名下存放的cookie是有限的，不同的浏览器存放的个数不一样，每个cookie存放的内容也是有限制的，不同的浏览器存放大小不一样)(我们通过document.cookie来获取当前网站下的cookie的时候 得到的是字符串形式的值，它包含了当前网页中所有的cookie的值，他会把所有的cookie通过一个分号+空格的形式串联起来)(如果想长时间存放一个cookie 需要设置cookie的过期时间)
	41.encodeURI()   把字符串编码  
	42.decodeURI()   把代码转换成字符串
	43.cookie的过期时间设置   先获取到当前时间   obj.setDate(obj.getDate()+5)  让过期时间永远比现在多5天（在过期时间和cookie数值之间用';expires='连接 表示过期时间）
	44.obj.onmousemove   当事件对象移动的时候触发 
	45.拖拽的时候选中文字会触发浏览器的默认样式（解决 阻止默认行为  ie 全局捕获(obj.setCapture)释放全局捕获(obj.releaseCapture)）
	46.ie  有全局捕获，并且有效果  ff  有，但是没效果   chrome  没有
	47.当拖拽的元素碰到另外的元素时触发的效果(九宫格原理)
	48.模拟滚动条控制内容时要注意  要找到滚动条和元素之间的比例
	49.Math.ceil();    向下取整    Math.floor()     向上取整
	50.Math.abs()     取绝对值
	51.Image          图片对象

三 JS高级
js库

1.完美运动 	
function startMove(obj, json, fnEnd)
{
	if(obj.timer)
	{
		clearInterval(obj.timer);
	}
	
	obj.timer=setInterval(function (){
		doMove(obj, json, fnEnd);
	}, 30);
	
	var oDate=new Date();
	
	if(oDate.getTime()-obj.lastMove>30)
	{
		doMove(obj, json, fnEnd);
	}
}

function getStyle(obj, attr)
{
	if(obj.currentStyle)
	{
		return obj.currentStyle[attr];
	}
	else
	{
		return getComputedStyle(obj, false)[attr];
	}
}

function doMove(obj, json, fnEnd)
{
	var iCur=0;
	var attr='';
	var bStop=true;	//假设运动已经该停止了
	
	for(attr in json)
	{
		if(attr=='opacity')
		{
			iCur=parseInt(100*parseFloat(getStyle(obj, 'opacity')));
		}
		else
		{
			iCur=parseInt(getStyle(obj, attr));
		}
		
		if(isNaN(iCur))
		{
			iCur=0;
		}
		
		var iSpeed=(json[attr]-iCur)/8;
		iSpeed=iSpeed>0?Math.ceil(iSpeed):Math.floor(iSpeed);
		
		if(parseInt(json[attr])!=iCur)
		{
			bStop=false;
		}
		
		if(attr=='opacity')
		{
			obj.style.filter="alpha(opacity:"+(iCur+iSpeed)+")";
			obj.style.opacity=(iCur+iSpeed)/100;
		}
		else
		{
			obj.style[attr]=iCur+iSpeed+'px';
		}
	}
	
	if(bStop)
	{
		clearInterval(obj.timer);
		obj.timer=null;
		
		if(fnEnd)
		{
			fnEnd();
		}
	}
	
	obj.lastMove=(new Date()).getTime();
}
	
	1.obj.match  按照某种规则搜索字符串
	2./g  全局匹配
	3./i  不分大小写
	4.[abc]  分别是a或b或c  等价于a|b|c;
	5.[0-9]     表示0到9的所有数字
	6.[^0-9]    排除选中范围内以外的东西
	7.   .     任意字符
	8.   /d    数字类型   /D  非数字类型
	9.   /w    字母，数字，下划线     /W   非数字，字母，下划线
	10.   /s   空格      /S   非空格
	11.    ^在[]外面时表示行首   $  表示行尾	
	12.     {n,m}      最小n次  最大m次
	13.  +  {1,}      最少一次不限最大
	14.  *  {0,}     一次没有不限最大
	15.  ?  {0,1}      一次或零次
	16,     {n}       正好n次 
	17.     {n, }     最少n次
	18.    /b    单词边界
	19   [\u4e00-\u9fa5]    所有中文汉子

二.
1.获取元素的两种方式:document.getElementById();  document.getElementsByTagName()[];
2.通过元素.style.cssText=‘’可以同时添加多个CSS样式
3.