	1.create database xx;创建一个数据库
	2.use xx;使用这个库
	3.create table xx(字段 类型，字段 类型...);创建一个表 as 给表起别名
	4.desc xx;查看表的详情  and关系运算符
	4.修改表名 Alter table 旧表名 rename to 新表名;   修改字段名Alter table 表名 旧字段名  新字段名 新的数据类型(必须填写数据类型) 修改数据类型:Alter table 表名 modify 字段名 数据类型  添加字段Alter table 表名 add 新字段名 数据类型  删除字段  Alter table 表名 drop 字段名 修改字段的排列顺序  Alter table 表名 modify 字段名1 数据类型 first|after 字段2
	5.insert into xx(字段，字段...) values(数据,数据...)   
	6.select * from xx;           
	7.show databases [link patten"];展示所有的数据库 
	8.drop database [if exists] da_name; 表示如果存在就删除
	9.deleta from 表名 条件  为了防止命名规则冲突等等问题 可以使用`把名字括起来
	10.where 1 表示条件一直为true 
	11.update 表名 set 修改的属性 条件
	12.show variables查看全部变量  大多数数据库的编码都使用的是gbk
	13.校对规则：每一套编码字符集都有与之相关的校对规则（字符编码的比较规则）
	14.ci不区分大小写 cs区分大小写 bin二进制编码字节比较
	15.show collation查看所有的校对规则
	16.字符集_地区名_校对规则
	17.like '规则' 表示某种规则 
	18.order by 字段  按照某种规则排序
	19.整数:tinyint（1字节）smallint（2字节）mediumint（3字节）int/intege（4字节）bigint（8字节）(默认是有符号的，使用unsigned定义为无符号)
	19(附加).使用not null表示不能为空  使用default表示默认值  使用comment表示提示  在表（）后面可以设置表的编码:character set utf8
	20.定义显示宽度 在字段的后面添加（M）m表示最小显示宽度是多少 需要使用前导零填充来达到目的，称为zerofill 
	21.定义bool值类型，就是tinyint（1）的别名
	22.小数：可以使用(M,D)M表示所有的数值位数（不包括小数点，和符号），D表示允许的小数位数
	23.定位数：decimal（M,D）M默认为10，D默认为0
	24.日期: datetime时间 timestamp时间戳 date日期 time可以保存一段时间 year表示年
	25.datatime和timestamp区别（存储的表现相同，但是存进去的数据形式不同）时间戳到2038年  时间戳+0就是去掉中间的一些字符串的连接(支持任意分隔符的连接或无分隔符)
	26.字符串：char固定长度（效率高，但是空间浪费大，长度限制为255） varchar（效率低，但是空间节约，长度限制为65535）可变长度(两者必须都用M，m表示字符数，而不是字节数)（汉子就是一个字节）
	27.枚举：存放的时候是一个字符串，其实存进去的是一个整形，最多允许65535个 （字段+0可以显整形类型）
	28.列属性(约束)reference 关联操作  null/not null是否为空  auto_increment自动增长  primary key/unique key主索引和索引(主索引不能为空也不饿能够冲突) default默认值
	29.实体之间的关系 1对1通过主键值连接  1对多（在多的那端，增加一个字段，用于指向实体所属的另外的实体的标识）  多对多(利用一个中间表，表示实体之间的对应关系，变成1:M，1:N)
	30.外键：表之间关联的桥梁 foreign key(本表的外键字段) references 连接的表名(连接到的外键键名)
	31.设置级联操作:1.主表更新on upate.2.主表删除on delete 允许的级联动作 Cascade执行操作 set null清空外键 Restrict 断开操作
	32.存储引擎：也叫表类型，指的是数据表的存储机制，索引方案等配套相关功能。不同的引擎，由于处理方式不同，会带来不同的功能或者相应优化，根据实际需求选择合理的引擎
	33.character-set-server=gbk默认表的编码default-storage-engine=INNODB默认的存储引擎
	34.order by排序 asc升序 desc降序（可以选择多个字段排序：先按照第一标准比较如果相等在比较下一个）select * from tb_name order by xx [asc][desc],可以在设置第二个字段
	35.Select select_expr [from tbl_name] [where] [group by] [having] [order by] [limit]严格顺序要求
	36.limit限制提取的数量  limit x,y从x开始提取y个数量的索引(x的默认值为0，如果y大于剩余的数量，则提取所有的表中元素)
	37.distinct去除重复的数据 （写在select的后面）
	38.(select1)union(select2)使用联合体吧多个select语句合并使用
	39.union联合select会自动运行distct  可以使用union all避免这种状况
	40.排序：子语句包括在括号内，子语句order by 配合limit才有效果
	41.对所有的结果进行统一的排序,在最后面进行order by
	42.注意:规定多个select，字段数一致，类型也应该一致，也会显示出来，但是mysql会进行处理，不是自己想要的
	43.子查询:语句内部的查询语句，就是子查询语句(必须使用括号括起来)
	44.子查询:按照出现的位置(from前，from后，where前，where后)和返回值数量(返回一个数据，一列数据，一行数据，一个表的数据)
	45.子查询返回一个数据使用关系运算符进行判断  子查询返回一列数据使用in|not in,还有其他集合运算符:1.=any()(!=any()不等于其中的任意一个即可)集合中任何一个等同于in.2.all()集合中所有元素,!=all()不等于集合中的所有元素等价于not in
	46.子查询返回一行数据使用一个括号构建出一行(xx,xx)=|in(select ..)(几乎不使用)  子查询返回一个表(一般使用在from前后)select * from 主表 where exists(select * from 字表 where 主表.主表字段=子表字段)<=>select * from 主表 where 主表字段 in(select 字表 字段 from 字表)
	47.exists(先获得每一条数据，在获得id字段，去teacher表中国找到对应值，找到，说明条件符合)in(先获得所有的id可能性，在检索teacher_class数据，判断当前的id是否在id集合中)
	48.jion连接多个表(内连接，外链接，自然连接)
	49.内连接:各个表之间数据存在进行连接(tb1_left inner join tb1_right on 连接条件)   外连接:(left outer join)各个表之间数据不存在，但是要进行连接
	50.左外链接和右外链接就是左表和右表显示的不一样(没有全外链接，全外链接需要union进行链接)(左连接用的最多)
	51.natural join内链接（默认搜寻字段相等并且记录相等的数据）
	52.natural left join(natural right join)搜寻相同字段的数据（左右表显示的数据的范围不一样,但都会显示出来）
	53.内连接如果没有条件就是笛卡尔积（显示出全部的配对结果）外连接不能没有条件
	54.select中:实用into outfile '文件的地址'可以不在cmd中显示出来，保存在服务器的文件夹下面(如果没有这个文件会创建，但是不会创建文件夹,如果存在这个文件，则不能创建这个文件)
	55.生成的文件的格式:默认的，采用行来区分记录，制表符来区分字段(fields terminated by '\t' enclosed by escaped by '\\'(控制字段),line terminated by '\n' starting by(控制记录))
	56.insert中的细节:insert into 表名 set 字段='值'（insert的另一种使用方式）(如果插入的过程中主键冲突,默认不会插入，但是可以使用on duplicate key update 执行操作)
	57.replace：如果插入的数据存在，使用这个就可以替换掉新的数据replace into <=> insert into
	58.load data infile 'file' into table
	59.允许连接删除 允许类似join语句，同时删除多个记录（需要先提供表名，在提供连接条件）
	60.清空表truncate ta_name(不会返回删除记录,重建自动增长的主键,逐行删除) 类似delete from tb_name
	61.更新数据update tb1_name join tb2_name tb1.x=tb2.x set tb1_y='' tb2_y='' where z(同时更新多个表的数据)
	62.备份1.适用于mysiam 直接将tb_name.frm,tb_name.myd,tb_name.myi;保存起来即可(适用范围有限)2.(比较通用的方法)将建表结构与插入的sql语句生存并保存，下次如果需要改结构执行即可:mysqldump.exe:mysqldump -uroot -p tb_name>盘符.sql
	63.还原:适用source指令，可以指定需要执行的sql语句的源代码文件:source 盘符.sql
	64.常见的备份操作:可以在盘符之前添加表名，单独备份表（可以备份多张表）
	65.视图(给别人看的,不一定能增删改;缩减业务逻辑):想要隐藏数据不被看到，可以设置虚拟数据表create view view_name as select..(本身就是保存了一个sql语句的结构 主表更新自动更新)
	66.删除视图drop view [if exists] view_name  修改字段alter view view_name as select...
	67.视图的执行过程1.merge:合并的执行方式,每当执行的时候，先将我们的视图的sql语句与外部的插叙视图的sql语句混合在一起，最终执行 2.temptable:临时表,每当查询的时候，将视图所使用select语句生成一个结果的临时表，再在当前的临时表内进行调查
	68.事物的概念，一组功能类似的sql语句同时发生或者同时失败(特点：1.失败后，可以回到开始的位置;2.都没成功之前，别的用户或者进程是不能看到数据内的数据修改的)(实现原理:在进行一组操作之前，设计一个断点，如果失败则返回断点)
	69.sql执行分成两个阶段：先保存到事物日志内，如果成功在执行，默认为自动执行，自动提交;（需要先关闭这个功能，存在一个系统变量autocommit可以对自动提交的进行配置,autocommit=1(开)0(关) 之后 show variables like 'autocommit'展示出是否打开了这个事物处理功能）
	70.成功使用commit提交 失败使用rollback返回到上一个节点(使用start transaction开启事务)
	71.原子性：事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生;一致性:事务前后数据的完整性必须保存一至;隔离性:多个用户并发访问数据库的时候，一个用户的事务不能被其他用户的事务所干扰,定并发事务之间的数据要相互隔离
	72.监听器(事件+执行的代码) 创建一个触发器:create  tigger  名字  事件  在那个表  监控哪些数据  执行sql代码
	73.事件 : 插入insert 删除 delete 修改update 事件的时机:触发前，触发后(由事件和时机过程了6个触发器事件before insert... after insert...)
	74.注意:触发器不能同名,目前mysql类事件设置一个触发器:定义了触发器之后不能随便的更改表中的数据
	75.管理触发器:删除drop trigger trigger_name 查看show create trigger trigger_name(\G规范输出格式)
	76.在触发器内，获得触发该程序时的数据:new在事件发生之后数据 和 old在事件发生之前的数据(数据就是触发该事件的记录)(insert没有old delete没有new )
	77.如果一个触发程序，由多个sql语句组成  应该1.语句组成语句块(begin end)标识语句块 2.语句块的语句需要独立的语句结束符,分号(应该在前面使用delimiter 符号 在end后面使用这个符号 在使用delimiter 改回来结束符号)

二.mysql数据库整理
	1.\s查看表的基本信息
	2.set character_set_client=字符编码（或者在my.ini中进行设置）
	3.创建数据表:create `表名`查看数据表:show  create database`表名`  desc查看数据表
	4.修改数据表:1.修改表名alter table 旧表名 rename to 新表名 2.修改字段名:alter table 表名 change 旧字段名 新字段名 字段类型 3.修改字段的数据类型 alter table 表名 modify 字段名 字段类型 4.添加字段 alter table 表名 add 字段名 字段类型 5.删除字段 alter table 表名 drop 字段名 6.修改字段的排列顺序alter table 表名 modify 字段1 数据类型 after 字段名2
	5.删除数据表:drop table 表名
	6.键约束:1.主键约束 primary key(多键值主键primary key(字段1，字段2))2.非空约束:not null 3.唯一约束 unique 3,默认约束 default 
	7.设置表的字段值自动增长(必须值整数类型并且必须是键值 auto_increment)
	8.创建索引:1.创建表的时候创建索引 unique(唯一索引)|fulltext（全局索引）|spatial（空间索引） index}key 别名(字段名) 长度 asc|desc 2.使用create index在已经创建的表上创建索引 create unique|fulltext|spatial index 索引名 on 表名 字段名 长度 asc|desc 3.使用alter table 语句在已经存在的表上创建索引 alter table 表名 add unique|fulltext|spatial index 索引名 字段名 长度 asc|desc
	9.删除索引:1.使用alter table 删除索引:alter talbe 表名 drop index 索引名2.使用drop index 删除索引:drop index 索引名 on 表名
	10.添加数据:1.insert into 表名 字段名() values()   (不指定字段名，直接用values添加数据...给指定字段名添加数据（需要那个字段添加数据写哪个字段）...同时添加多条数据 values后面用，隔开) 
	11.更新数据:1.update 表名 set 字段名=值,字段2=值 where(如果不指定where语句 更新全部数据)
	12.删除数据:1.delete from 表名 where 语句(如果不指定where语句 删除全部数据)
	13.简单查询:1.select distinct(剔除重复数据) *|字段,字段 from 表名 where 条件表达1 group by 字段名 having 条件表达式2 order by 字段名 asc|desc limit 记录数(group by 按照指定字段进行分组 order by 进行升序和降序) 2.带关系运算符的查询(大于小于号啥的 不等于是<>) 带in的关键字查询(括号里代表一个集合) 带between and关键字的查询(between x and y   查询两个之间的范围) 空值查询（is null）  带like 关键字的查询(like '匹配字符', %代表通配符(不限制数量) _限制数量) 带and关键子的查询 多个where语句使用(or关键字查询和这个差不多)
	14.高级查询:1.聚合函数count()返回某列的行数 sum()返回某列值的和 max()返回最大值 min()返回最小值 avg()返回平均值 （例如:select count(字段名) from 表名）2.对查询结果进行排序 select * from 表名 order by 字段名 asc|desc 3.分组查询:1.单独使用group by（select * from 表名 group by xx）2.聚合函数和group by 一起使用(select count(*) from 表名 group by xx) 3.group by和having 关键字一起使用 select 4.使用limit 限制数量(偏移量，数量) 5.为表名和字段名取别名 select * from 表名 as 别名 where...  为字段取别名 select 字段名 as 别名.. from 表名
	15.外键: 为表添加外键约束 1.在创建表的同时添加外键 alter (...foreign key [外键名字] (本表的外键) references 外表 (外表的键))(修改这个外键) 2.在已经创建的表上添加外键alter table tb_name add foreign key [外键名称] (本表的外键) references 外表(外表外键字段) 3.删除外键:alter table tb_name drop foreign key 外键名称
	外键扩展:级联操作(在主表数据发生改变时，与之关联的从表数据应该如何处理) on update主表更新 on delete主表删除 允许的级联操作1.cascade:关联操作(主表删除，从表也删除) 2.set null：(主表删除，从表设置为null) 3.restrict拒绝主表的相关操作 (注：写在创建外键的后面 例如:on delete set null)
	16.操作关联表:一对一通过主键,一对多再多的一端创建一个键值,多对多通过一个中间表
	17.连接查询:1.交叉连接.select * from 表1 cross join 表2 返回的是两个表的乘积的个数   连接(拿出第一个表的记录与第二个表依次相连) 2.内连接 select * from 表1 join  表2 on 表1.关系字段=表2.关系字段  3.外连接分为左右（join左边为左表，右边相反）（外连接不支持where  要使用on 左连接就是侧重左表，左表的信息不会丢失(经常使用)）  select * from 表1 right(left) join 表2 on 表1.字段 表2.字段  子查询:带in关键字的子查询 in(select...仅限返回一个数据列) 带exists关键字的查询exists(select...用于测试，返回的是真假) 带any关键字的查询any(select...只要满足一个条件就可以) 带all关键字的查询all(select...需要满足内层的全部条件) 最基本的是带比较运算符的查询
	18.事务管理:，一组功能类似的sql语句同时发生或者同时失败(特点：1.失败后，可以回到开始的位置;2.都没成功之前，别的用户或者进程是不能看到数据内的数据修改的)(实现原理:在进行一组操作之前，设计一个断点，如果失败则返回断点) set autocommit=1|0是否开启事务自动提交功能 show like variables 'autocommit'查看是否开启了 commit(提交) rollback(回滚) 脏读:一个事务读取了另外一个事务未提交的数据(两个都开启事务) 不可重复读:一个事务(开启事务)查询另外一个更新了数据的事务,能查询到更新了的数据(不开启事务) 幻读:和不可重复度差不多  这个是增加数据被读取到
	19.存储过程的创建:create procedure sp_name([proc_parater])[charater...]routine_body   使用delimiter 符号  改变结束的符号
	20.变量的使用 定义变量:declare 变量名 变量类型 default变量默认值(可以是一个表达式，如果没有就是null)(变量的使用范围是:debin...end)  变量赋值:set 变量名 = 数值, 变量2 = 变量值
	21.视图（对虚拟表或者实体表进行操作都会互相影响另外的一个）:视图其实就是一个select语句 但是可以让表格变得更安全 创建:create view v_name as select ...  删除 drop view [if exists] v_name  修改(可以让表变得更安全	)alter view v_name (字段1,字段2) as select ...  可以把多个表连接起来生成一个新的视图(起到简单程序的作用)
	23.数据的还原和备份:mysqldump -uroot -p 表名>C:\xx\xx\xx.sql(最后这个名字可以随便起名)   导出数据:mysql -uroot -p 表名D:\xx\xx\xx.sql   source d:\xx\xx\xx.sql
	24.管理监听器:create tigger 名字 事件(after update等等) 在那个表(使用on) 监听那些数据(for each row) 执行sql语句(begin ... end)(注意begin和end中间要使用;号结束)
	25.用户管理:创建普通用户create user '用户名'@'服务器'identified by '密码';删除普通用户:drop user '用户名'@'服务器' 修改root密码:mysqladmin -uroot -p password 新密码  root修改用户密码create grant on *.* to '用户名' @'服务器' identfied by '新密码'   普通用户修改密码:set password=passwrd(新密码);  使用root用户给普通用户上权限grant all privieges(授予的权限) on *(databasename).*(tablename) to 'username'@'localhost' [identified by 'password']